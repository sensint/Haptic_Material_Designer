public class DiscreteSlider extends Button {
  int sliderValue;
  int sliderPosition;
  int sliderMin;
  int sliderMax;
  int steps;

  DiscreteSlider(PApplet parent, String name, char shortcut, int x, int w) { //its built the same way, just we add a min and max value
    super(parent, name, shortcut);
    sliderValue = 0;
    sliderPosition = x+w/2;
    sliderMin = 0;
    sliderMax = 1;
    steps = 0;
  }

  //constructor without position
  DiscreteSlider(PApplet parent, String name, char shortcut) {
    super(parent, name, shortcut);
  }

  void assignSteps(int stepnumber) {
    steps = stepnumber;
  }

  void assignRange(int min, int max) { //we tell the slider what its range is here
    sliderMin = min;
    sliderMax = max;
    sliderValue = min;
  }

  //  void display() {
  // super.display();
  // stroke(255);
  // int value= this.getSliderValue();
  // println("SLIDER VALUE FROM WITHIN THE DISCRETE SECTION" + value);
  // rect(value*steps-3, buttonY, 6, buttonHeight);
  // }

  //alternate constructor, if we want to give it new coordinates
  void display(int x, int y, int w, int h) {
    super.display(x, y, w, h);

    // parent.stroke(255);

    // float currentSliderPosition = (this.getSliderValue() / float(steps-1)) * super.buttonWidth;
    float currentSliderPosition = this.getSliderValue();
    println("[INFO] CurrentSliderPosition: " + str(currentSliderPosition));

    // draw indicator
    // parent.strokeWeight(1);
    // int correctedPos = round(((super.buttonWidth)/steps * this.getSliderValue2()) + super.buttonX;

    parent.rect(super.buttonX + currentSliderPosition, super.buttonY, 5, super.buttonHeight);
    // parent.rect(correctedPos, super.buttonY, 5, super.buttonHeight);
    parent.text(str(this.getSliderValue()), super.buttonX + super.buttonWidth + 10, super.buttonY + (super.buttonHeight/2)); //add the value, so you know what you're doing
    
    // draw lines
    float stepWidth = super.buttonWidth / (steps - 1);
    println("[INFO] Button weight:" + str(super.buttonWidth) + " - Step width: " + str(stepWidth));
    for (int i = 0; i < steps; i++) {
      // parent.line((super.buttonX+(i/20.0) * super.buttonWidth), super.buttonY, (super.buttonX+(i/20.0) * super.buttonWidth), super.buttonHeight + super.buttonY);
      parent.line(super.buttonX + int(stepWidth * i), super.buttonY + (super.buttonHeight/2), super.buttonX + int(stepWidth * i), super.buttonHeight + super.buttonY);
    }
  }

  boolean isClicked() {
    if (parent.mousePressed && super.hover()) {
      clicked = true;
      sliderPosition = parent.mouseX - super.buttonX;
    } else {
      clicked = false;
    }
    return clicked;
  }

  // not sure what to use the keyboard shortct for. kinda pointless here
  void activateClick() { //instead of toggling, we move the slider
    if (parent.mousePressed && super.hover()) {
      clicked = true;
      sliderPosition = parent.mouseX - super.buttonX;
      
    } else {
      clicked = false;
    }
  }

  int getSliderValue() {
    float tempValue = map(sliderPosition, 0, super.buttonWidth, sliderMin, sliderMax);
    sliderValue = int(tempValue * float(steps));
    println("Slider position: " + sliderPosition + " Slidervalue: " + sliderValue + " Temp value: " +  tempValue + " Slidermax: " + sliderMax);
    // return sliderValue;
    return sliderPosition;
  }

//     int getSliderValue2() {
//     float tempValue = map(sliderPosition, 0, super.buttonWidth, sliderMin, sliderMax);
//     sliderValue = int(tempValue * float(steps));
//     println("Slider position: " + sliderPosition + " Slidervalue: " + sliderValue + " Temp value: " +  tempValue + " Slidermax: " + sliderMax);
//     // return sliderValue;
//     return tempValue;
//   }
  
  //void displayHandle() {
  //  parent.rect(sliderPosition - 3, super.buttonY, 3, super.buttonHeight);
  //}
}
