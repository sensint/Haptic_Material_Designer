public class DiscreteSlider extends Button {
  int sliderValue; // value between sliderMin - sliderMax
  int sliderPosition; // sliderPosition between [x - x+sliderWidth]
  int sliderMin;
  int sliderMax;
  int steps;
  String name;
  color indicatorColor = color(255, 255, 255);
  boolean ticks = true;
  boolean valueSet = false;
  String unit;

  DiscreteSlider(PApplet parent, String name, char shortcut, int positionX, int wi) { //its built the same way, just we add a min and max value
    super(parent, name, shortcut);
    sliderValue = 0;
    //  sliderPosition = positionX + wi / 2;
    sliderMin = 0;
    sliderMax = 1;
    steps = 0;
  }

  //constructor without position
  DiscreteSlider(PApplet parent, String name, char shortcut, int min, int max, int value, int stepnumber, int wi, String mes) {
    super(parent, name, shortcut);
    //paul: comment to self -- mixing up seperation of logical properties / dimensions&location now
    sliderMin = min;
    sliderMax = max;
    steps = stepnumber;
    sliderValue = value;
    //sliderPosition = int(map(value, sliderMin, sliderMax, sliderMin, sliderMax));
    // sliderPosition = (value - sliderMin) * ((wi) / (steps));
    //print("sliderPosition: ");
    //println(sliderPosition);
    //println(name + " - SLIDER POSITION 1: " + str(sliderPosition));
    //println(name + " - STEPH WITH: " + str((wi / (steps))));
    this.name = name;
    this.unit = mes;


    //slider value should be whatever the value is
    // sliderPosition should be where the cursors is in pixels
  }

  void setSliderValue(int value) { //DO NOT USE (THIS IS NOT BEHAVING THE WAY ITS DESIGNED TO AT ALL RIGHT NOW)
    //  float tempValueForPrecision = float(value - sliderMin) * float(super.buttonWidth / (steps));
    //  println("Setting Slider Value to " + value);
    //   sliderPosition = int(tempValueForPrecision);
  }

  int getSliderValue() {
    int tempVar = round(map(indicatorPos(), super.buttonX, super.buttonX+super.buttonWidth, sliderMin, sliderMax));
    return tempVar;
  }


  void showTicks(boolean value) {
    ticks = value;
  }

  //alternate constructor, if we want to give it new coordinates
  void display(int x, int y, int w, int h) {
    super.display(x, y, w, h);
    if (!valueSet) {
      // sliderPosition = int(super.buttonWidth * ((sliderValue - sliderMin)/(sliderMax - sliderMin))) + super.buttonX;
      float tempValueForPrecision = x + float(sliderValue) * (float(w) / float(steps));
      println("The display function is setting the " + name + " Slider Value to " + sliderValue);
      println("The unit size is " + (float(w) / float(steps)) + " pixels");
      println("The x offset is " + x + " pixels");
      println("It's calculated it should be " + tempValueForPrecision);
      sliderPosition = int(tempValueForPrecision);
      valueSet = true;
    }



    parent.noStroke();

    // display indicator
    parent.fill(indicatorColor);
    parent.rect(this.indicatorPos(), super.buttonY, 3, super.buttonHeight);
    //print("indicatorpos: ");
    //println(this.indicatorPos());

    // display text
    parent.text(str(this.getSliderValue()), super.buttonX + super.buttonWidth + 10, super.buttonY + (super.buttonHeight / 2));
    parent.text(unit, super.buttonX + super.buttonWidth + 10, super.buttonY + (super.buttonHeight - 6));

    // draw lines
    if (ticks == true) {
      drawTicks();
    }
  }

  void drawTicks() { //this can create nullpointer exceptions
    float stepWidth = super.buttonWidth / (steps);
    for (int i = 0; i < steps + 1; i++) {
      parent.stroke(255);
      parent.line(super.buttonX + int(stepWidth * i), super.buttonY + (super.buttonHeight / 2), super.buttonX + int(stepWidth * i), super.buttonHeight + super.buttonY);
    }
  }

  boolean isClicked() {
    if (parent.mousePressed && super.hover()) {
      clicked = true;
      sliderPosition = parent.mouseX;
    } else {
      clicked = false;
    }
    return clicked;
  }

  // not sure what to use the keyboard shortct for. kinda pointless here
  void activateClick() { //instead of toggling, we move the slider
    if (parent.mousePressed && super.hover()) {
      clicked = true;
      sliderPosition = parent.mouseX;
      //   if(parent.mouseX >= super.buttonWidth){
      //     sliderPosition = super.buttonX;
      //   } else if (parent.mouseX <= super.buttonX){
      //     sliderPosition = 0;
      //   }
    } else {
      clicked = false;
    }
  }



  int indicatorPos() {
    float stepsize = super.buttonWidth/(sliderMax-sliderMin);
    float currentPixel = round(sliderPosition - super.buttonX);
    float interpolatedValue = currentPixel/stepsize+sliderMin;
    int currentNewStep = int(round(interpolatedValue)*stepsize+super.buttonX);
    int currentStep = round(((float)steps) * (sliderPosition) / super.buttonWidth);
    int correc = round(((float)super.buttonWidth) / steps * currentStep) + super.buttonX;
    println(this.name + " - SLIDER POSITION 2: " + str(sliderPosition));
    println(this.name + " - CORREC: " + str(correc));
    println(this.name + " - NEW: " + str(currentNewStep));
    return currentNewStep;
  }
}
